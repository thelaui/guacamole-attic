////////////////////////////////////////////////////////////////////////////////
// guacamole - an interesting scenegraph implementation
//
// Copyright (c) 2011 by Mischa Krempel, Felix Lauer and Simon Schneegans
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// this program.  If not, see <http://www.gnu.org/licenses/>.
//
/// \file
/// \brief Declaration of the Material class.
////////////////////////////////////////////////////////////////////////////////

#ifndef MATERIAL_HPP
#define MATERIAL_HPP

#include "include/renderer/ShaderProgram.hpp"

class RenderContext;

////////////////////////////////////////////////////////////////////////////////
/// \brief Stores information on a Material.
///
/// For now, materials are defined by a shader only.
////////////////////////////////////////////////////////////////////////////////

class Material {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///
        ////////////////////////////////////////////////////////////////////////
        Material();

        ////////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///
        /// \param shader
        ////////////////////////////////////////////////////////////////////////
        Material( ShaderProgram const& shader );

        ////////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///
        ////////////////////////////////////////////////////////////////////////
        ~Material();

        ////////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///
        /// \param context
        ////////////////////////////////////////////////////////////////////////
        void use(RenderContext const& context) const;

        ////////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///
        /// \return
        ////////////////////////////////////////////////////////////////////////
        ShaderProgram const& get_shader() const;

    private:
        ShaderProgram shader_;
};

#endif // MATERIAL_HPP


